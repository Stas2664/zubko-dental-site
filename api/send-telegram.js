const https = require('https');

module.exports = (req, res) => {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method Not Allowed' });
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const { name, age, phone, complaints } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (!name || !phone) {
    res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = `ü¶∑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: ${name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
ü©∫ –ñ–∞–ª–æ–±—ã: ${complaints}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
  const botToken = '7535946322:AAGpiSvEsyBWama9QC-ydaRAF7Y94yutoc8';
  const chatId = '-1002827782723';
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const postData = JSON.stringify({
    chat_id: chatId,
    text: message
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  const options = {
    hostname: 'api.telegram.org',
    port: 443,
    path: `/bot${botToken}/sendMessage`,
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': postData.length
    }
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
  const request = https.request(options, (response) => {
    let data = '';
    
    response.on('data', (chunk) => {
      data += chunk;
    });
    
    response.on('end', () => {
      if (response.statusCode === 200) {
        res.status(200).json({ 
          success: true, 
          message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' 
        });
      } else {
        res.status(500).json({ 
          error: '–û—à–∏–±–∫–∞ Telegram API',
          details: data 
        });
      }
    });
  });

  request.on('error', (error) => {
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
      details: error.message 
    });
  });

  request.write(postData);
  request.end();
};
